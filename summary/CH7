# 추상 데이터 타입

유사한 동작을 가진 자료구조의 클래스에 대한 수학적 모델
자료구조는 크게 배열 기반의 연속 방식과 포인터 기반의 연결 방식이 있다

# 스택에 대해서

스택은 배열의 끝에서만 데이터를 접근할 수 있는 선형 자료구조 (LIFO)
시간복잡도는 O(1) 로, push/pop/top/peek/empty/size 등이 있다.
스택은 리스트 (self.items=[]) 나 노드 (객체) 의 컨테이너로 구현을 할 수 있다 (stack)
https://www.sanfoundry.com/python-program-implement-stack-using-linked-list/

# 큐에 대해서

큐는 스택과 다르게 항목이 들어온 순서대로 접근 가능하다. (FIFO)
시간 복잡도는 O(1) 이며, enqueue/dequeue/peek,front/empty/size 등의 기능이 있다.
파이썬의 insert()를 사용해서 구현이 가능하지만, 두 개의 스택 (리스트) 로 효율적 구현 가능!
큐도 스택과 비슷하게 노드와 연결 리스트를 통해서 구현이 가능하다.
https://www.sanfoundry.com/python-program-implement-queue-data-structure-using-linked-list

# 데크에 대해서

데크는 스택과 큐의 결합체 (이중 연결 리스트) 이며, 양쪽 끝에서 항목의 조회, 삽입, 삭제 가능
파이썬에서 제공하는 collections 패키지의 deque 모듈을 사용한다. (데크의 크기도 지정 가능)

# 우선순위 큐와 힙에 대해

우선순위 큐는 일반 스택과 큐와 비슷하지만, 연관된 우선순위가 존재한다,
우선순위 큐는 힙을 사용하여 구현되는데, 힙은 각 노드가 하위 노드보다 작은 이진 트리이다.
균형 트리의 모양을 만드는 시간복잡도는 O(log n)으로, 리스트에서 가장 큰/작은 요소의 반복 접근
힙을 사용함으로써 가장 큰/작은 요소를 처리하는 시간복잡도는 O(1) 이고 조회, 추가, 수정은 O(log n) 이다.
우선순위 큐는 heapq 모듈을 사용해서 구현하는 형식 (숫자가 높을수록 우선순위도 증가)
https://smlee729.github.io/python/data%20structure/2015/03/04/1-heap.html

# 연결 리스트에 대해

값과 다음 노드에 대한 포인트가 포함된 노드로 이루어진 선형 리스트다.
마지막 노드는 None 값을 가지며, 연결 리스트로 스택 (head) 과 큐 (tail) 를 구현할 수도 있다.
연결 리스트의 크기는 도적으로, 런타임 저장 항목이 몇 개인지 모를 때 유용하다.
연결 리스트의 삽입 시간 복잡도는 O(1) 이며, 검색 및 삭제의 시간 복잡도는 O(n) 이다.

# 해시 테이블에 대해서

키를 값에 연결하여, 하나의 키가 0 또는 1개의 값과 연관된다; 각 키는 해시 함수 계산!
해시 테이블은 이후 해시 버킷의 배열로 구성되며, 해시 충돌을 방지하기 위해 키-값 쌍을 저장한다.
해시 테이블의 조회, 삽입, 삭제의 시간복잡도는 O(1) 이며, 각 키가 동일해지면 O(n) 이다.
다음의 블로그를 통해 해시 테이블의 개념과 샘플 코드를 알 수 있다.
