# 클래스와 객체 (인스턴스)

기본적으로 객체지향 설계를 하려면 데이터를 패키지화하고, 메서드를 제한해야 한다.
클래스는 ‘사전에 정의된 특별한 데이터와 메서드의 집합’ 이다. 
이런 클래스에 선언된 모양 그대로 생성된 실체를 ‘객체’ 라고 한다.
객체가 소프트웨어에서 실체화될 때 (메모리에 할당), 이를 인스턴스라고 부른다.

# 클래스 인스턴스의 생성

인스턴스 생성 작업은 어떤 특징을 가진 빈 객체를 만드는 것
클래스()는 생성자라고 불리며, 이를 호출하면 __new__라는 메소드 호출되고 __init__이 초기화
객체에는 데이터와 메서드로 이루어지는 클래스 속성이 있으며, self로 자기 자신을 인수로 잡는다.
네임스페이스는 이름을 객체로 매핑하는 것으로, 파이썬 딕셔너리로 구현되어 있다.
스코프는 네임스페이스가 직접 접근이 가능한 파이썬 프로그램의 텍스트 영역에 해당한다.
스코프는 텍스트에 다라 결정되며, 정의가 실행되면 네임스페이스와 생성되어 지역 스코프로 사용

# 객체지향 프로그래밍

특수화는 슈퍼 클래스의 모든 속성을 상속해 새 클래스를 만드는 절차이다.
모든 메서드는 서브 클래스에서 오버라이드될 수 있고, 상속은 is-a 관계이다.
구글 파이썬 스타일 가이드에서는 상속받지 않는 클래스면 “object” 를 명시함을 권한다.
다형성은 메서드가 서브 클래스 내에서 재정의될 수 있다는 원리이다.
파이썬은 서브 클래스에 정의된 메서드를 사용하며, 슈퍼 클래스는 super()로 호출한다!

# 합성과 집합화에 대해 

합성은 한 클래스에서 다른 클래스의 인스턴스 변수를 포함하는 경우 (강한 연관관계)
집합화는 클래스 사이에 연관 관계는 있지만, 생명주기가 약하며 독립적인 경우 (약한 연관관계)

# 디자인 패턴에 대해

데코레이터 패턴 : @표기를 사용해 함수 또는 메서드 변환을 용이하게 (wrapper)
옵서버 패턴 : 객체의 일 대 다 의존 관계에서 객체 상태가 변경되면, 종속된 객체에 통지해 상태 갱신
싱글턴 패턴 : 초기화된 객체의 인스턴스를 전역에서 사용하기 위해 (슈퍼 클래스로 호출)
