# 멀티 프로세스와 멀티 스레드 #

멀티 프로세스는 별도의 메모리 영역 보유, IPC등의 방법으로만 통신 가능
파이썬에서는 멀티 프로세스 방식에 subprocess 모듈을 사용한다.
멀티 스레드는 동일한 메모리에 접근, threading 모듈 처리로 한 번에 한 스레드만 접근
각 프로세스가 독립적인 스택, 힙, 코드, 데이터를 가지지만 스레드는 메모리를 공유한다.

# 동시성과 병렬성 #

동시성은 여러 작업이 한 번에 실행되는 것처럼 ‘보이는 것’ 이다. (유휴 시간 활용)
병렬성은 물리적으로 여러 작업이 동시에 처리되는 경우에 해당한다 (데이터/작업)

# Subprocess와 Threading 모듈 #

Subprocess 모듈은 ‘부모-자식’ 프로세스 쌍을 생성하는데 사용된다. (or 쉘값을 다시 올릴거나 저장할 때)
부모 프로세스는 사용자에 의해 실행되며, 차례로 다른 일 처리하는 자식 프로세스 인스턴스 실행
Threading 모듈은 멀티 스레드 사용을 위한 모듈로, 락과 데드락을 회피하는 게 중요하다
queue를 활용해 자원의 접근을 직렬화하여 한 번에 하나에 스레드만 접근할 수 있게 한다.
스레드가 실행 중이면 프로그램은 미종료이므로, 이를 데몬으로 변환해 실행되지 않으면 종료하도록!
queue.join()은 큐가 빌 때까지 (큐의 모든 항목이 처리될 때까지) 기다리는 메소드이다.

# 뮤텍스와 세마포어 #

뮤텍스는 공유 리소스에 한 번에 하나의 스레드만 접근할 수 있도록 하는 장치이다.
개념적으로 뮤텍스는 1부터 시작하는 정수로, 배열 변경 때마다 숫자를 올리고 내리는 식으로
배열 수정 전에 뮤텍스를 잡그고, 수정 작업이 끝나고 잠금을 푸는 형식으로 진행
세마포어는 1보다 큰 수로 시작, 한 번에 자원 접근이 가능한 스레드의 수를 제한한다.

# 데드락과 스핀락 #

데드락은 두 개 이상의 프로세스가 교착해 실행 불가한 상태 
데드락의 전제조건 4가지는 상호 배제, 점유 대기, 비선점, 순환 대기이다.
스핀락은 코어 당 하나의 스레드만 사용하면 고성능 상황에서 유용한 ‘바쁜 대기’ 이다.

# 스레딩에 대한 구글 스타일 가이드 #

내장 타입의 원자성과 원자적 변수 할당에 의존하면 안된다.
queue 모듈의 Queue 데이터 타입을 스레드 간 데이터 전달 방식으로 사용
저수준의 락 대신, threading.condition을 사용할 수 있도록 조건 변수를 적절히 사용한다.

# 프로그래머의 좋은 습관에 대해 #

다양한 버전의 파이썬이나 라이브러리에 대응키 위해 "virtualenv(wrapper)" 를 활용한다.
파이썬 디버거 pdb를 활용해서 코드의 틀린 곳을 디버깅할 수 있다.
프로파일링을 활용해서 프로그램의 실행 시간이 느리거나 예상보다 많은 메모리가 소비된 경우 :
1) 튜플로 대체 2) 제너레이터 사용 3) 문자열 연산 대신 append+join을 적극 활용할 것
"cProfile" 모듈은 호출 시간에 대한 세부 분석을 통해 병목 현상을 찾는데 사용된다.
"timeit" 모듈은 코드 일부분의 실행 시간 확인에 사용된다.
단위 테스트를 통해 예상값이 맞는지를 파악한다 (doctest, unittest, pytest)
