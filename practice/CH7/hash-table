(출처 : https://ratsgo.github.io/data%20structure&algorithm/2017/10/25/hash/)

# 해쉬 테이블의 기본적 개념 #

해쉬 테이블은 key에 value를 저장하는 구조로, 원하는 데이터를 한 방에 찾을 수 있다 (O(1))
키를 지정하면 특정한 해쉬 함수에 맞추어서 bucket에 키에 해당하는 Value가 저장되는 형식이다.
해시함수를 사용하여 키를 해시값으로 매핑하고, 이 해시값을 색인(index) 혹은 주소 삼아 데이터의 값(value)을 키와 함께 저장하는 자료구조
하지만, 해쉬 테이블에서는 '해쉬 충돌' 이라고 부르는 근본적인 문제가 존재한다. 
이는 서로 다른 두 개의 입력값에 대해 동일한 출력값을 내는 상황을 의미한다. 
이 해쉬 충돌을 막기 위해 다양한 방법이 동원되고 있다.

# 해쉬 테이블의 종류 #

키의 전체 개수와 동일한 크기의 버킷을 가진 해시테이블을 'direct-address table'
이 경우에는 해쉬 충돌은 없지만 쓰지 않는 키까지 마련해야 하므로 메모리 효율성이 떨어진다.
그래서 보통은 해시테이블 크기가 (m) 실제 사용되는 키 개수 (n) 보다 적은 해시테이블을 제작한다.
여기서 n/m는 load factor라고 하며, 1보다 큰 경우 해쉬충돌이 발생한다.

# 체이닝에 대해서 #

버킷 당 들어갈 수 있는 엔트리 수에 제한을 두지 않는다.
즉, 버킷에 데이터가 이미 있다면 연결리스트처럼 노드를 추가해서 넣어 체인처럼 만든다.
두 키가 한 버켓을 가리키고 있을 때, 동일한 버킷에 두 개 데이터를 저장해서 최근 데이터는 head에 추가
"삽입 복잡성" 은 매핑하고 헤드가 추가하는 데 O(1) + O(1) = "O(1)" 이 된다.
"쿼리값에 해당하는 데이터가 해쉬테이블이 없으면" 버킷의 요소를 다 검사해야 확인 가능하므로 "O(1+개수)"
존재하지만 최악의 경우 (Tail에 데이터 위치), 버킷 개수 - 1 까지 검사해야 하므로 O(1+개수)
정말 최악의 경우 (한 버킷에 모든 데이터가 위치) O(n) 이 될 수도 있다.

# 오픈 어드레싱에 대해서 #

오픈 어드레싱은 한 버킷당 들어갈 수 있는 엔트리가 '하나' 인 해시테이블.
메모리 문제는 딱히 발생하지는 않으나, 해쉬 충돌의 위험이 존재한다.
해시함수에 따라 배열할 때, 만약 이미 다른 값이 해쉬에 있으면 그 다음 빈 곳으로 삽입하는 형식
특정 데이터를 삭제하고 탐색할 때, DEL 등으로 빈곳을 삽입한다.

# 탐사의 여러 방식들 #

오픈 어드레싱은 해시 충돌 문제가 발생 가능! (키가 몰리는 경우) 
선형 탐사는 고정폭으로 옮겨서 차례로 엑세스 하는 방식 (하지만 Primary Clustering 취약)
제곱 탐사는 그 폭이 제곱수로 늘어난다. (다른 키들이 동일한 초기 해시값을 갖는 secondary clustering에 취약)
이중해싱은 해시 함수 2개를 준비, 하나는 최초 해시 / 다른 하나는 해시충돌 발생 시 탐사이동 폭을 위해
이 경우 계산 복잡성은 load factor가 1보다 작다고 가정해서 probing 횟수에 비례해서 결정된다.
식의 경우는 Successful Search는 1/알파 ln (1/(1-알파)) 이고 Unsuccessful은 1/알파
알파값에 따라 그 기대값이 급격하게 바뀌므로, 데이터가 어느 정도 찬다면 다시 새롭게 해싱을 해주는 것이 좋다.

# 해수 함수로 충돌 완화하기 #

좋은 해쉬함수의 기준은 테이블 크기가 m일 때 1/m 확률로 데이터를 고르게 배열하는 경우
"division method" 는 특정 값으로 나눈 나머지를 활용, "multiplication 메서드" 는 h(k)=(kAmod1)×m
"Universal Hashing" 은 다수의 해시함수를 생성, 이 집합 H에서 무작위로 선택해 해시값을 만드는 기법
H에서 무작위로 뽑인 해쉬함수에서 임의의 값을 임의의 해시값에 매핑할 확률을 1/M으로 만드는 게 목표
# 해시테이블의 크기 m를 소수로 정한다.
# 키값을 다음과 같이 r+1개로 쪼갠다 : k0, k1,…, kr
# 0부터 m−1 사이의 정수 가운데 하나를 무작위로 뽑는다. 분리된 키값의 개수(r+1)만큼 반복해서 뽑는다. 
# 이를 a=[a0,a1,…,ar]로 둔다. 따라서 a의 경우의 수는 모두 mr+1가지이다.
# 해시함수를 다음과 같이 정의한다 : ha(x)=Σri=0(aikimod m)
# a가 mr+1가지이므로 해시함수의 집합 H의 요소 수 또한 mr+1개이다.
