# 옵저버 패턴의 기본적 구조는 다음과 같다:
# subscriber는 기본적으로 옵저버를 통해 subject의 변화를 관찰한다
# subscriber가 생성되고 Observer가 이를 등록한 다음,
# subject 객체에 Observer (subscriber 등록된 상태) 를 등록한다.
# subject가 notify_observer를 통해 Observer 객체의 self.msg = info로 하면
# observer 객체는 notify를 통해 등록된 subscriber의 sub.msg (원래 빈 메시지) 를 자신의 self.msg로 변경
# subscriber는 이를 update를 통해 print 한다.

class Observer:
    def __init__(self):
        self.subscriber = []
        self.msg = ''

    def notify(self):
        for sub in self.subscriber:
            sub.msg = self.msg

    def register(self, obsv):
        self.subscriber.append(obsv)

    def unregister(self, obsv):
        self.subscriber.remove(obsv)

class subscriber:
    def __init__(self):
        msg = ''

    def update(self):
        print(self.msg)

class Subject:
    # 옵저버에 의해 관찰되는 객체
    def __init__(self):
        self.observer = []

    def notify_observer(self, info):
        for obsv in self.observer:
            obsv.msg = info

    def attach(self, obsv):
        self.observer.append(obsv)

    def detach(self, obsv):
        self.observer.remove(obsv)

if __name__ == "__main__":
    a = subscriber()
    b = subscriber()
    c = subscriber()

    ob = Observer() # 옵저버가 subscriber를 등록한다.
    ob.register(a)
    ob.register(b)
    ob.register(c)

    sub = Subject() # 서브젝트 객체에 옵저버 등록
    sub.attach(ob) # 등록하는 상태 : subscriber --- (observer) ---> subject

    sub.notify_observer("Hello") # 서브젝트에 등록된 옵저버들에게 self.msg = info로 변경

    ob.notify() # subscriber들에게 자신의 메시지 (self.msg) 를 모두 sub.msg에 연동

    a.update() # 업데이트된 자신의 self.msg를 출력
    b.update()
    c.update()

